#!/bin/bash
# dlitz 2023

set -eu -o pipefail

usage() {
    printf 'Usage: %s example.sources.in keyring.gpg... > example.sources\n' "$0"
}

if [ "$*" = "--help" ]; then
    usage
    exit 0
elif [ "$#" -lt 2 ] ; then
    usage >&2
    exit 2
fi

template_file="$1"
shift 1


cleanup() {
    local rc=$?
    [ -z "${tf+1}" ] || { rm -f "$tf"; unset tf; } || rc=$?
    [ -z "${tf2+1}" ] || { rm -f "$tf2"; unset tf2; } || rc=$?
    return "$rc"
}

unset tf tf2
trap cleanup INT TERM EXIT
tf=$(mktemp)
tf2=$(mktemp)

# Sanity check
if cat "$@" | grep -q 'BEGIN PGP PUBLIC KEY BLOCK'; then
    echo >&2 "error: keyrings $@ should be binary, not ASCII"
    exit 1
fi

cat "$@" | gpg --batch --enarmor > "$tf"
sed -Ee '
    s/^-----(.*) PGP ARMORED FILE-----/-----\1 PGP PUBLIC KEY BLOCK-----/;
    /^Comment: /d;
    s/^(.)/\1/;
    s/^(\.*)$/.\1/;
    #/^-----END PGP PUBLIC KEY BLOCK-----/Q0;    # Exit status 0
    #$Q47;   # Error if we reach the end of the file without seeing a public key block
' < "$tf" > "$tf2"
perl -e '
sub indent ($) {
    my ($ind) = @_;
    my @result;
    while (<STDIN>) {
        chomp();
        push @result, "$ind$_";
    }
    join("\n", @result)
}

while(<>) {
    s/^(\s+)\@\@KEYRING\@\@$/indent($1)/e;
    print $_;
}
' "$template_file" < "$tf2"
